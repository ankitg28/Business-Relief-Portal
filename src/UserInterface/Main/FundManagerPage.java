/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UserInterface.Main;

import Business.DB4OUtil.DB4OUtil;
import BusinessReliefPortal.Business.Business;
import BusinessReliefPortal.BusinessReliefSystem;
import BusinessReliefPortal.Employee.Employee;
import BusinessReliefPortal.Enterprise.BusinessEnterprise;
import BusinessReliefPortal.Enterprise.Enterprise;
import BusinessReliefPortal.Enterprise.FundManagementEnterprise;
import BusinessReliefPortal.Enterprise.UserAndVerificationEnterprise;
import BusinessReliefPortal.Lender.Lender;
import BusinessReliefPortal.Network.Network;
import BusinessReliefPortal.Organization.Organization;
import BusinessReliefPortal.Organization.TreasuryOrg;
import BusinessReliefPortal.Proposal.Proposal;
import BusinessReliefPortal.Proposal.ProposalDirectory;
import BusinessReliefPortal.WorkRequest.WorkRequest;
import static UserInterface.Main.LenderPage.lenderID;
import java.util.ArrayList;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ishitajanwale
 */
public class FundManagerPage extends javax.swing.JFrame {

    BusinessReliefSystem system;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();

    /**
     * Creates new form TreasurerPage
     */
    public FundManagerPage() {
        initComponents();
        system = LoginPage.system;
        //system = dB4OUtil.retrieveSystem();
//        txtAmountToBeAdded.setText("0");

        popFunds();

        popProposals();

        popWorkReq();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        panDeductFunds = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabProposals = new javax.swing.JTable();
        btnDeductFunds = new javax.swing.JButton();
        txtGovtTotalFunds = new javax.swing.JTextField();
        lblGovtTotalFunds = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtLenTotalFunds = new javax.swing.JTextField();
        lblGovtTotalFunds1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtLenTotalFundsAfterDeduction = new javax.swing.JTextField();
        txtGovtTotalFundsAfterDeduction = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        panelWorkRequests = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabWorkRequests = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnLogOut = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 204, 255));
        setMaximumSize(new java.awt.Dimension(1000, 1000));
        setMinimumSize(new java.awt.Dimension(1000, 1000));
        setPreferredSize(new java.awt.Dimension(1000, 1000));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        jTabbedPane1.setForeground(new java.awt.Color(0, 165, 220));
        jTabbedPane1.setMaximumSize(new java.awt.Dimension(1000, 1000));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(1000, 1000));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(1000, 1000));
        jTabbedPane1.setRequestFocusEnabled(false);
        jTabbedPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTabbedPane1KeyPressed(evt);
            }
        });

        panDeductFunds.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabProposals.setBackground(new java.awt.Color(0, 171, 214));
        tabProposals.setForeground(new java.awt.Color(255, 255, 255));
        tabProposals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Proposal ID", "Funder ", "Business ID", "Borrower ID", "Requested Fund Amount", "Status"
            }
        ));
        jScrollPane2.setViewportView(tabProposals);

        panDeductFunds.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 990, 270));

        btnDeductFunds.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        btnDeductFunds.setForeground(new java.awt.Color(0, 171, 214));
        btnDeductFunds.setText("Deduct Funds");
        btnDeductFunds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeductFundsActionPerformed(evt);
            }
        });
        panDeductFunds.add(btnDeductFunds, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 320, -1, 34));

        txtGovtTotalFunds.setBackground(new java.awt.Color(0, 171, 214));
        txtGovtTotalFunds.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        txtGovtTotalFunds.setForeground(new java.awt.Color(255, 255, 255));
        panDeductFunds.add(txtGovtTotalFunds, new org.netbeans.lib.awtextra.AbsoluteConstraints(619, 391, 187, 34));

        lblGovtTotalFunds.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblGovtTotalFunds.setForeground(new java.awt.Color(0, 139, 174));
        lblGovtTotalFunds.setText("Government Total Funds");
        panDeductFunds.add(lblGovtTotalFunds, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 388, 299, 34));

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 139, 174));
        jLabel5.setText("Lender Total Funds");
        panDeductFunds.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 467, 299, 33));

        txtLenTotalFunds.setBackground(new java.awt.Color(0, 171, 214));
        txtLenTotalFunds.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        txtLenTotalFunds.setForeground(new java.awt.Color(255, 255, 255));
        panDeductFunds.add(txtLenTotalFunds, new org.netbeans.lib.awtextra.AbsoluteConstraints(619, 469, 187, 33));

        lblGovtTotalFunds1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblGovtTotalFunds1.setForeground(new java.awt.Color(0, 139, 174));
        lblGovtTotalFunds1.setText("Government Funds after deduction");
        panDeductFunds.add(lblGovtTotalFunds1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 553, -1, -1));

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 139, 174));
        jLabel6.setText("Lender Funds after Deduction");
        panDeductFunds.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 630, -1, -1));

        txtLenTotalFundsAfterDeduction.setBackground(new java.awt.Color(0, 171, 214));
        txtLenTotalFundsAfterDeduction.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        txtLenTotalFundsAfterDeduction.setForeground(new java.awt.Color(255, 255, 255));
        panDeductFunds.add(txtLenTotalFundsAfterDeduction, new org.netbeans.lib.awtextra.AbsoluteConstraints(619, 627, 187, 34));

        txtGovtTotalFundsAfterDeduction.setBackground(new java.awt.Color(0, 171, 214));
        txtGovtTotalFundsAfterDeduction.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        txtGovtTotalFundsAfterDeduction.setForeground(new java.awt.Color(255, 255, 255));
        panDeductFunds.add(txtGovtTotalFundsAfterDeduction, new org.netbeans.lib.awtextra.AbsoluteConstraints(619, 550, 187, 33));

        jLabel2.setForeground(new java.awt.Color(0, 139, 174));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/istockphoto-1281736074-612x612 (1).jpg"))); // NOI18N
        panDeductFunds.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1570, 890));

        jTabbedPane1.addTab("Deduct Funds", panDeductFunds);

        panelWorkRequests.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabWorkRequests.setBackground(new java.awt.Color(0, 171, 214));
        tabWorkRequests.setForeground(new java.awt.Color(255, 255, 255));
        tabWorkRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Work Rquest Id", "Sender", "Receiver", "Sender Org", "Receiver Org", "Message", "Status"
            }
        ));
        jScrollPane6.setViewportView(tabWorkRequests);

        panelWorkRequests.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 64, 984, 261));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/white-bright-abstract-background-vector-20802409.jpg"))); // NOI18N
        jLabel3.setText("jLabel3");
        panelWorkRequests.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 980));

        jTabbedPane1.addTab("WorkRequest", panelWorkRequests);

        jPanel1.setBackground(new java.awt.Color(0, 171, 214));

        btnLogOut.setBackground(new java.awt.Color(0, 162, 216));
        btnLogOut.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnLogOut.setForeground(new java.awt.Color(255, 255, 255));
        btnLogOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logout (3).png"))); // NOI18N
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Fund Manager Page");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(344, 344, 344)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 918, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        LoginPage lp = new LoginPage();
        lp.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void jTabbedPane1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTabbedPane1KeyPressed
        // TODO add your handling code here:
        // TODO add your handling code here:
        //system.
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equalsIgnoreCase(nw.getNetworkName())) {
                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                    for (Organization org : ent.getOrganizationDirectory().getOrganizationList()) {
                        if (org.getOrgType() == Organization.Type.TREASURYORG) {
//                            TreasuryOrg treasury = (TreasuryOrg) org;
//                            txtTotalFunds.setText(String.valueOf(treasury.getTotalfunds()));
//                            txtEssFunds.setText(String.valueOf(treasury.essentialFunds));
//                            txtNonEssFunds.setText(String.valueOf(treasury.nonessentialFunds));
//                            jTabbedPane1.setSelectedIndex(1);
//
//                            txtAmountToBeAdded.setText("0");
//
//                            return;
                        }
                    }

                }
            }
        }

//        TreasuryOrg treasury = new TreasuryOrg();
//        float totalFunds = treasury.getTotalfunds();
//
//        txtTotalFunds.setText(String.valueOf(treasury.getTotalfunds()));
//        txtEssFunds.setText(String.valueOf(treasury.essentialFunds));
//        txtNonEssFunds.setText(String.valueOf(treasury.nonessentialFunds));
//        jTabbedPane1.setSelectedIndex(1);
//
//        txtAmountToBeAdded.setText("0");

    }//GEN-LAST:event_jTabbedPane1KeyPressed

    private void btnDeductFundsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeductFundsActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = tabProposals.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a Row to Deduct Funds");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tabProposals.getModel();

        Vector<Vector> dataVector;
        dataVector = model.getDataVector();
        int proposalId = (int) dataVector.get(selectedRowIndex).get(0);
        String funder = (String) dataVector.get(selectedRowIndex).get(1);
        int propBusId = (int) dataVector.get(selectedRowIndex).get(2);
        String borrowerId = (String) dataVector.get(selectedRowIndex).get(3);
        double reqFundAmt = (Double) dataVector.get(selectedRowIndex).get(4);
        String status = (String) dataVector.get(selectedRowIndex).get(5);

        String propID = String.valueOf(proposalId);
        //   float reqFundAmt = (float) fundAmt;
        float totalFunds;
        String businessType = "";

        if ("Government".equals(funder)) {
            for (Network nw : system.getNetworkList()) {
                if ("Boston".equalsIgnoreCase(nw.getNetworkName())) {

                    for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                        if (ent.getEnterpriseType() == Enterprise.EnterpriseType.BUSINESSENTERPRISE) {
                            BusinessEnterprise busEnt = (BusinessEnterprise) ent;
                            ArrayList<Business> businessDir = busEnt.getBusinessDir();
                            for (Business bus : businessDir) {
                                if (bus.getBusinessId() == propBusId) {
                                    businessType = bus.getBusinessType();
                                    break;

                                }
                            }
                        }
                        if (ent.getEnterpriseType() == Enterprise.EnterpriseType.FUNDMANAGEMENTENTERPRISE) {
                            FundManagementEnterprise fme = (FundManagementEnterprise) ent;
                            Map<Integer, Employee> employeeDirectory = fme.getEmployeeDirectory();

                            for (Organization org : ent.getOrganizationDirectory().getOrganizationList()) {
                                if (org.getOrgType() == Organization.Type.TREASURYORG) {
                                    TreasuryOrg treasury = (TreasuryOrg) org;

                                    totalFunds = treasury.getTotalfunds();
                                    txtGovtTotalFunds.setText(String.valueOf(totalFunds));
                                    totalFunds = treasury.deductFunds((float) reqFundAmt, businessType);
                                    txtGovtTotalFundsAfterDeduction.setVisible(true);
                                    txtGovtTotalFundsAfterDeduction.setText(String.valueOf(totalFunds));

                                    ArrayList<Proposal> proposalDirectory = nw.getProposalDirectory().getProposalDirectory();
                                    for (Proposal propo : proposalDirectory) {
                                        if (propo.getProposalId() == proposalId) {
                                            propo.setProposalStatus("Funds Allocated");
                                            propo.getBorrower().setActiveStatus("Fund Request Approved");
                                        }
                                    }

                                    for (Map.Entry<Integer, Employee> entry : employeeDirectory.entrySet()) {
                                        Object key = entry.getKey();
                                        Object val = entry.getValue();
                                        //Add wr to Treasurer
                                        if (entry.getKey().equals(2)) { //Emp 2 is Fund Manager to whom we need to assign WORKREQUEST
                                            Map<Integer, WorkRequest> personWorkQueue = entry.getValue().getPersonWorkQueue();
                                            for (Map.Entry<Integer, WorkRequest> fundMngWR : personWorkQueue.entrySet()) {
                                                if (fundMngWR.getValue().getWorkRequestName().equals(propID)) {
                                                    fundMngWR.getValue().setMessage("Funds Allocated to : " + borrowerId);

                                                    fundMngWR.getValue().setStatus("Proposal " + propID + " Closed ");
                                                    popWorkReq();
                                                }

                                            }

                                        }

                                    }

                                    return;

                                }
                            }
                        }

                    }
                }
            }

        } else {

            for (Network nw : system.getNetworkList()) {
                if ("Boston".equalsIgnoreCase(nw.getNetworkName())) {
                    for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                        if (ent.getEnterpriseType() == Enterprise.EnterpriseType.FUNDMANAGEMENTENTERPRISE) {
                            FundManagementEnterprise fme = (FundManagementEnterprise) ent;
                            Map<Integer, Employee> employeeDirectory = fme.getEmployeeDirectory();
                            for (Map.Entry<Integer, Employee> entry : employeeDirectory.entrySet()) {
                                Object key = entry.getKey();
                                Object val = entry.getValue();
                                //Add wr to Treasurer
                                if (entry.getKey().equals(1)) { //Emp 1 is Treasurer to whom we need to assign WORKREQUEST
                                    Map<Integer, WorkRequest> personWorkQueue = entry.getValue().getPersonWorkQueue();
                                    for (Map.Entry<Integer, WorkRequest> treasurerWR : personWorkQueue.entrySet()) {
                                        if (treasurerWR.getValue().getWorkRequestName().equals(propID)) {
                                            treasurerWR.getValue().setMessage("Funds Allocated to : " + borrowerId);

                                            treasurerWR.getValue().setStatus("Proposal " + propID + " Closed ");
                                            popWorkReq();
                                        }

                                    }

                                }

                            }
                        }
                        String propStatus = null;
                        String borrowerStatus = null;
                        if (ent.getEnterpriseType() == Enterprise.EnterpriseType.USERANDVERIFICATIONENTERPRISE) {
                            UserAndVerificationEnterprise userEnt = (UserAndVerificationEnterprise) ent;
                            ArrayList<Lender> lenderDirectory = userEnt.getLenderDirectory();
                            for (Lender len : lenderDirectory) {
                                if (len.getLenderID().equals(funder)) {

                                    if (len.getFundingAmount() < reqFundAmt) {
                                        JOptionPane.showMessageDialog(rootPane, len.getLenderID() + ": doesnot have sufficient funds");
                                        totalFunds = len.getFundingAmount();
                                        txtLenTotalFunds.setText(String.valueOf(totalFunds));
                                           propStatus = len.getLenderID() + ": doesnot have sufficient funds";
                                           borrowerStatus = "Initial";
                                    } else {

                                        totalFunds = len.getFundingAmount();
                                        txtLenTotalFunds.setText(String.valueOf(totalFunds));
                                        totalFunds = len.deductFunds((float) reqFundAmt);
                                        txtLenTotalFundsAfterDeduction.setVisible(true);
                                        txtLenTotalFundsAfterDeduction.setText(String.valueOf(totalFunds));
                                        
                                           propStatus = "Funds Allocated";
                                           borrowerStatus = "Fund Request Approved";
                                    }

                                    ArrayList<Proposal> proposalDirectory = nw.getProposalDirectory().getProposalDirectory();
                                    for (Proposal propo : proposalDirectory) {
                                        if (propo.getProposalId() == proposalId) {
                                            propo.setProposalStatus(propStatus);
                                            propo.getBorrower().setActiveStatus(borrowerStatus);
                                        }
                                    }

                                    return;

                                }
                            }
                        }
                    }
                }
            }
        }


    }//GEN-LAST:event_btnDeductFundsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If NimpanDeductFundstroduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TreasurerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TreasurerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TreasurerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TreasurerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FundManagerPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeductFunds;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblGovtTotalFunds;
    private javax.swing.JLabel lblGovtTotalFunds1;
    private javax.swing.JPanel panDeductFunds;
    private javax.swing.JPanel panelWorkRequests;
    private javax.swing.JTable tabProposals;
    private javax.swing.JTable tabWorkRequests;
    private javax.swing.JTextField txtGovtTotalFunds;
    private javax.swing.JTextField txtGovtTotalFundsAfterDeduction;
    private javax.swing.JTextField txtLenTotalFunds;
    private javax.swing.JTextField txtLenTotalFundsAfterDeduction;
    // End of variables declaration//GEN-END:variables

    public void popWorkReq() {
        DefaultTableModel model = (DefaultTableModel) tabWorkRequests.getModel();
        model.setRowCount(0);
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equalsIgnoreCase(nw.getNetworkName())) {

                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.FUNDMANAGEMENTENTERPRISE) {
                        FundManagementEnterprise fme = (FundManagementEnterprise) ent;
                        // Employee treasurer = fme.getEmployeeDirectory().get(1);
                        //  Map<Integer, WorkRequest> personWorkQueue = treasurer.getPersonWorkQueue();
                        Map<Integer, Employee> employeeDirectory = fme.getEmployeeDirectory();
                        Employee fundManager = employeeDirectory.get(2);//Work Requests of employee 2 FundManager
                        Map<Integer, WorkRequest> personWorkQueue = fundManager.getPersonWorkQueue();

                        for (Map.Entry<Integer, WorkRequest> entry : personWorkQueue.entrySet()) {
                            Object key = entry.getKey();
                            Object val = entry.getValue();

                            Object[] row = new Object[7];

                            row[0] = entry.getKey();
                            row[1] = entry.getValue().getSender();
                            row[2] = entry.getValue().getReceiver();
                            row[3] = entry.getValue().getSenderOrg();
                            row[4] = entry.getValue().getReceiverOrg();
                            row[5] = entry.getValue().getMessage();
                            row[6] = entry.getValue().getStatus();

                            model.addRow(row);

                        }

                    }
                }

            }
        }
    }

    public void popProposals() {
        DefaultTableModel model = (DefaultTableModel) tabProposals.getModel();
        model.setRowCount(0);

        for (Network nw : system.getNetworkList()) {
            if ("Boston".equalsIgnoreCase(nw.getNetworkName())) {
                ProposalDirectory proposalDirectory = nw.getProposalDirectory();
                for (Proposal prop : proposalDirectory.getProposalDirectory()) {

                    if ("Funds Requested".equalsIgnoreCase(prop.getProposalStatus())) {

                        Object[] row = new Object[6];
                        row[0] = prop.getProposalId();
                        row[1] = prop.getFunderId();
                        row[2] = prop.getBusinessIdByFunder();
                        row[3] = prop.getBorrower().getBorrowerId();
                        row[4] = prop.getBorrower().getRequestedFund();
                        row[5] = prop.getProposalStatus();

                        model.addRow(row);

                    }
//                 
                }
            }
        }
    }

    private void popFunds() {
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equalsIgnoreCase(nw.getNetworkName())) {
                for (Enterprise en : nw.getEntDirObj().getEnterpriseList()) {
                    if (en.getEnterpriseType() == Enterprise.EnterpriseType.FUNDMANAGEMENTENTERPRISE) {
                        for (Organization org : en.getOrganizationDirectory().getOrganizationList()) {
                            if (org.getOrgType() == Organization.Type.TREASURYORG) {
                                TreasuryOrg treasury = (TreasuryOrg) org;
//
//                                txtTotalFunds.setText(String.valueOf(treasury.getTotalfunds()));
//                                txtEssFunds.setText(String.valueOf(treasury.getEssentialfunds()));
//                                txtNonEssFunds.setText(String.valueOf(treasury.getNonessentialfunds()));

                                return;
                            }
                        }

                    }
                }
            }
        }
    }
}
