/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UserInterface.Main;

import Business.DB4OUtil.DB4OUtil;
import BusinessReliefPortal.Borrower.Borrower;
import BusinessReliefPortal.Business.Business;
import BusinessReliefPortal.Employee.Employee;
import BusinessReliefPortal.Enterprise.BusinessEnterprise;
import BusinessReliefPortal.Enterprise.Enterprise;
import BusinessReliefPortal.Enterprise.FundManagementEnterprise;
import BusinessReliefPortal.Enterprise.ProposalManagementEnterprise;
import BusinessReliefPortal.Enterprise.UserAndVerificationEnterprise;
import BusinessReliefPortal.Lender.Lender;
import BusinessReliefPortal.Network.Network;
import BusinessReliefPortal.Organization.Organization;
import BusinessReliefPortal.Proposal.Proposal;
import BusinessReliefPortal.UserAccount.UserAccount;
import BusinessReliefPortal.WorkRequest.WorkRequest;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ishitajanwale
 */
public class ProposalValidationPage extends javax.swing.JFrame {

    /**
     * Creates new form ProposalValidationPage
     */
    BusinessReliefPortal.BusinessReliefSystem system;
    
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    String propIDfromListSelection;
    
    public ProposalValidationPage() {
        initComponents();
        system = LoginPage.system;
        txtBorrowerID.setEditable(false);
        populateLendersForVerification();
        populateProposalsForVerification();
        populateGovernmentBusinessTable();
        populatePrivateBusinessTable();
        populateLenderSupportedBusinessTable();
        populateBusinessId();
        
        
        
        popWorkReqTab();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ThirdPartyPane = new javax.swing.JTabbedPane();
        panProposalValidation = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listBorrower = new javax.swing.JList<>();
        lblBorrowerList = new javax.swing.JLabel();
        lblBorrowerID = new javax.swing.JLabel();
        lblBusinessName1 = new javax.swing.JLabel();
        txtBusinessName = new javax.swing.JTextField();
        lblBusinessID = new javax.swing.JLabel();
        lblProfit = new javax.swing.JLabel();
        lblEmpNumber = new javax.swing.JLabel();
        lblRequestedAmt = new javax.swing.JLabel();
        txtBorrowerID = new javax.swing.JTextField();
        lblReqAmt = new javax.swing.JLabel();
        cbBusinessProfitYes = new javax.swing.JCheckBox();
        cbNumberofEmpYes = new javax.swing.JCheckBox();
        cbAvgSalaryYes = new javax.swing.JCheckBox();
        txtReqAmt = new javax.swing.JTextField();
        btnApproveBorrowerProposal = new javax.swing.JButton();
        btnRejectBorrowerProposal = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaComments = new javax.swing.JTextArea();
        lblFunderID = new javax.swing.JLabel();
        txtFunderID = new javax.swing.JTextField();
        cbBusinessID = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        panAllBusiness = new javax.swing.JPanel();
        lblBSupported = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblLenderBusiness = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblGovernmentBusiness = new javax.swing.JTable();
        lblGovBusinessList = new javax.swing.JLabel();
        lblLenderSupportedBusiness = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblLenderSupportedBusiness = new javax.swing.JTable();
        lblLenderBusinessList = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        panAllFunds = new javax.swing.JPanel();
        lblTotalFunds = new javax.swing.JTextField();
        lblEssentialFunds = new javax.swing.JTextField();
        lblNonEssentialFunds = new javax.swing.JTextField();
        txtTotalFunds = new javax.swing.JTextField();
        txtEFunds = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNEFunds2 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabLenderFunds = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        panelWorkRequests = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabWorkRequests = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnLogout = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panProposalValidation.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        listBorrower.setBackground(new java.awt.Color(0, 171, 214));
        listBorrower.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        listBorrower.setForeground(new java.awt.Color(255, 255, 255));
        listBorrower.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listBorrower.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listBorrowerMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(listBorrower);

        panProposalValidation.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(36, 90, 90, 620));

        lblBorrowerList.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblBorrowerList.setForeground(new java.awt.Color(0, 171, 214));
        lblBorrowerList.setText("Select a Proposal ID");
        panProposalValidation.add(lblBorrowerList, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 60, -1, -1));

        lblBorrowerID.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblBorrowerID.setForeground(new java.awt.Color(0, 171, 214));
        lblBorrowerID.setText("Borrower ID");
        panProposalValidation.add(lblBorrowerID, new org.netbeans.lib.awtextra.AbsoluteConstraints(209, 90, 290, 26));

        lblBusinessName1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblBusinessName1.setForeground(new java.awt.Color(0, 171, 214));
        lblBusinessName1.setText("Business Name");
        panProposalValidation.add(lblBusinessName1, new org.netbeans.lib.awtextra.AbsoluteConstraints(209, 147, 330, 26));

        txtBusinessName.setBackground(new java.awt.Color(0, 171, 214));
        txtBusinessName.setForeground(new java.awt.Color(255, 255, 255));
        panProposalValidation.add(txtBusinessName, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 140, 281, 29));

        lblBusinessID.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblBusinessID.setForeground(new java.awt.Color(0, 171, 214));
        lblBusinessID.setText("Business ID");
        panProposalValidation.add(lblBusinessID, new org.netbeans.lib.awtextra.AbsoluteConstraints(207, 263, 317, 29));

        lblProfit.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblProfit.setForeground(new java.awt.Color(0, 171, 214));
        lblProfit.setText("Is the Business in Profit?");
        panProposalValidation.add(lblProfit, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 380, 330, 29));

        lblEmpNumber.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblEmpNumber.setForeground(new java.awt.Color(0, 171, 214));
        lblEmpNumber.setText("Number of Employees<500");
        panProposalValidation.add(lblEmpNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(209, 440, 463, 29));

        lblRequestedAmt.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblRequestedAmt.setForeground(new java.awt.Color(0, 171, 214));
        lblRequestedAmt.setText("Requested Amount");
        panProposalValidation.add(lblRequestedAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(209, 204, 310, 29));

        txtBorrowerID.setBackground(new java.awt.Color(0, 171, 214));
        txtBorrowerID.setForeground(new java.awt.Color(255, 255, 255));
        panProposalValidation.add(txtBorrowerID, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 80, 281, 29));

        lblReqAmt.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblReqAmt.setForeground(new java.awt.Color(0, 171, 214));
        lblReqAmt.setText("Requested Amount < 2.5*Average Employees Salary");
        panProposalValidation.add(lblReqAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(209, 499, 463, 29));

        cbBusinessProfitYes.setText("Yes");
        cbBusinessProfitYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBusinessProfitYesActionPerformed(evt);
            }
        });
        panProposalValidation.add(cbBusinessProfitYes, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 380, -1, -1));

        cbNumberofEmpYes.setText("Yes");
        cbNumberofEmpYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNumberofEmpYesActionPerformed(evt);
            }
        });
        panProposalValidation.add(cbNumberofEmpYes, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 440, -1, -1));

        cbAvgSalaryYes.setText("Yes");
        cbAvgSalaryYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAvgSalaryYesActionPerformed(evt);
            }
        });
        panProposalValidation.add(cbAvgSalaryYes, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 500, -1, -1));

        txtReqAmt.setBackground(new java.awt.Color(0, 171, 214));
        txtReqAmt.setForeground(new java.awt.Color(255, 255, 255));
        panProposalValidation.add(txtReqAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 200, 281, 29));

        btnApproveBorrowerProposal.setBackground(new java.awt.Color(51, 153, 0));
        btnApproveBorrowerProposal.setForeground(new java.awt.Color(255, 255, 255));
        btnApproveBorrowerProposal.setText("Approve");
        btnApproveBorrowerProposal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveBorrowerProposalActionPerformed(evt);
            }
        });
        panProposalValidation.add(btnApproveBorrowerProposal, new org.netbeans.lib.awtextra.AbsoluteConstraints(772, 616, 133, 43));

        btnRejectBorrowerProposal.setBackground(new java.awt.Color(255, 51, 0));
        btnRejectBorrowerProposal.setForeground(new java.awt.Color(255, 255, 255));
        btnRejectBorrowerProposal.setText("Reject");
        btnRejectBorrowerProposal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectBorrowerProposalActionPerformed(evt);
            }
        });
        panProposalValidation.add(btnRejectBorrowerProposal, new org.netbeans.lib.awtextra.AbsoluteConstraints(772, 677, 133, 43));

        txtAreaComments.setColumns(20);
        txtAreaComments.setRows(5);
        jScrollPane1.setViewportView(txtAreaComments);

        panProposalValidation.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 622, 365, 92));

        lblFunderID.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblFunderID.setForeground(new java.awt.Color(0, 171, 214));
        lblFunderID.setText("Funder ID");
        panProposalValidation.add(lblFunderID, new org.netbeans.lib.awtextra.AbsoluteConstraints(209, 322, 330, 29));

        txtFunderID.setBackground(new java.awt.Color(0, 171, 214));
        txtFunderID.setForeground(new java.awt.Color(255, 255, 255));
        panProposalValidation.add(txtFunderID, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 320, 281, 29));

        cbBusinessID.setBackground(new java.awt.Color(0, 171, 214));
        cbBusinessID.setForeground(new java.awt.Color(255, 255, 255));
        cbBusinessID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbBusinessIDItemStateChanged(evt);
            }
        });
        cbBusinessID.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                cbBusinessIDInputMethodTextChanged(evt);
            }
        });
        cbBusinessID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBusinessIDActionPerformed(evt);
            }
        });
        panProposalValidation.add(cbBusinessID, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 260, 281, 29));

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 171, 214));
        jLabel4.setText("Comments:");
        panProposalValidation.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 585, 123, 31));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/istockphoto-1281736074-612x612 (1).jpg"))); // NOI18N
        panProposalValidation.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 930));

        ThirdPartyPane.addTab("Review Borrower Proposals", panProposalValidation);

        panAllBusiness.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblBSupported.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblBSupported.setForeground(new java.awt.Color(0, 171, 214));
        lblBSupported.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBSupported.setText("Businesses Supported by the Lenders and Government");
        panAllBusiness.add(lblBSupported, new org.netbeans.lib.awtextra.AbsoluteConstraints(324, 60, 479, 33));

        tblLenderBusiness.setBackground(new java.awt.Color(0, 171, 214));
        tblLenderBusiness.setForeground(new java.awt.Color(255, 255, 255));
        tblLenderBusiness.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Business ID", "Business Name", "Lender ID"
            }
        ));
        jScrollPane4.setViewportView(tblLenderBusiness);
        if (tblLenderBusiness.getColumnModel().getColumnCount() > 0) {
            tblLenderBusiness.getColumnModel().getColumn(1).setHeaderValue("Business Name");
            tblLenderBusiness.getColumnModel().getColumn(2).setResizable(false);
        }

        panAllBusiness.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(356, 192, 304, 614));

        tblGovernmentBusiness.setBackground(new java.awt.Color(0, 171, 214));
        tblGovernmentBusiness.setForeground(new java.awt.Color(255, 255, 255));
        tblGovernmentBusiness.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Government ID", "Business Name"
            }
        ));
        jScrollPane5.setViewportView(tblGovernmentBusiness);

        panAllBusiness.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 192, 304, 614));

        lblGovBusinessList.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblGovBusinessList.setForeground(new java.awt.Color(0, 171, 214));
        lblGovBusinessList.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblGovBusinessList.setText("Government Business List");
        lblGovBusinessList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        panAllBusiness.add(lblGovBusinessList, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 142, 297, 32));

        lblLenderSupportedBusiness.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblLenderSupportedBusiness.setForeground(new java.awt.Color(0, 171, 214));
        lblLenderSupportedBusiness.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLenderSupportedBusiness.setText("Lender Supported Business List");
        lblLenderSupportedBusiness.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        panAllBusiness.add(lblLenderSupportedBusiness, new org.netbeans.lib.awtextra.AbsoluteConstraints(682, 142, 297, 32));

        tblLenderSupportedBusiness.setBackground(new java.awt.Color(0, 171, 214));
        tblLenderSupportedBusiness.setForeground(new java.awt.Color(255, 255, 255));
        tblLenderSupportedBusiness.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Lender ID", "Business ID"
            }
        ));
        jScrollPane7.setViewportView(tblLenderSupportedBusiness);
        if (tblLenderSupportedBusiness.getColumnModel().getColumnCount() > 0) {
            tblLenderSupportedBusiness.getColumnModel().getColumn(0).setResizable(false);
        }

        panAllBusiness.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(681, 192, 304, 614));

        lblLenderBusinessList.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblLenderBusinessList.setForeground(new java.awt.Color(0, 171, 214));
        lblLenderBusinessList.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLenderBusinessList.setText("Lender Business List");
        lblLenderBusinessList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        panAllBusiness.add(lblLenderBusinessList, new org.netbeans.lib.awtextra.AbsoluteConstraints(366, 142, 297, 32));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/white-bright-abstract-background-vector-20802409.jpg"))); // NOI18N
        panAllBusiness.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 850));

        ThirdPartyPane.addTab("View Business Available", panAllBusiness);

        panAllFunds.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTotalFunds.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblTotalFunds.setForeground(new java.awt.Color(0, 171, 214));
        lblTotalFunds.setText("Total Funds Available");
        lblTotalFunds.setBorder(null);
        panAllFunds.add(lblTotalFunds, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 136, 196, 44));

        lblEssentialFunds.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblEssentialFunds.setForeground(new java.awt.Color(0, 171, 214));
        lblEssentialFunds.setText("Essential Funds");
        lblEssentialFunds.setBorder(null);
        lblEssentialFunds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblEssentialFundsActionPerformed(evt);
            }
        });
        panAllFunds.add(lblEssentialFunds, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 198, 196, 44));

        lblNonEssentialFunds.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblNonEssentialFunds.setForeground(new java.awt.Color(0, 171, 214));
        lblNonEssentialFunds.setText("Non- Essential Funds");
        lblNonEssentialFunds.setBorder(null);
        panAllFunds.add(lblNonEssentialFunds, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 261, 196, 44));

        txtTotalFunds.setBackground(new java.awt.Color(0, 171, 214));
        txtTotalFunds.setForeground(new java.awt.Color(0, 171, 214));
        panAllFunds.add(txtTotalFunds, new org.netbeans.lib.awtextra.AbsoluteConstraints(447, 136, 211, 44));

        txtEFunds.setBackground(new java.awt.Color(0, 171, 214));
        txtEFunds.setForeground(new java.awt.Color(0, 171, 214));
        panAllFunds.add(txtEFunds, new org.netbeans.lib.awtextra.AbsoluteConstraints(447, 199, 211, 44));

        jLabel2.setBackground(new java.awt.Color(0, 171, 214));
        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 171, 214));
        jLabel2.setText("Government Funds :");
        panAllFunds.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, 212, 33));

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 171, 214));
        jLabel3.setText("Lender Funds");
        panAllFunds.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 389, 212, 33));

        txtNEFunds2.setBackground(new java.awt.Color(0, 171, 214));
        txtNEFunds2.setForeground(new java.awt.Color(255, 255, 255));
        panAllFunds.add(txtNEFunds2, new org.netbeans.lib.awtextra.AbsoluteConstraints(447, 262, 211, 44));

        tabLenderFunds.setBackground(new java.awt.Color(0, 171, 214));
        tabLenderFunds.setForeground(new java.awt.Color(255, 255, 255));
        tabLenderFunds.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Lender ID", "Lender Funds"
            }
        ));
        jScrollPane2.setViewportView(tabLenderFunds);

        panAllFunds.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 490, -1, 240));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/istockphoto-1281736074-612x612 (1).jpg"))); // NOI18N
        panAllFunds.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 950));

        ThirdPartyPane.addTab("View Funds Available", panAllFunds);

        panelWorkRequests.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabWorkRequests.setBackground(new java.awt.Color(0, 171, 214));
        tabWorkRequests.setForeground(new java.awt.Color(255, 255, 255));
        tabWorkRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Work Rquest Id", "Sender", "Receiver", "Sender Org", "Receiver Org", "Message", "Status"
            }
        ));
        jScrollPane6.setViewportView(tabWorkRequests);

        panelWorkRequests.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 71, 956, 360));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/white-bright-abstract-background-vector-20802409.jpg"))); // NOI18N
        panelWorkRequests.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -120, -1, 1170));

        ThirdPartyPane.addTab("WorkRequest", panelWorkRequests);

        jPanel1.setBackground(new java.awt.Color(0, 171, 214));

        btnLogout.setBackground(new java.awt.Color(0, 171, 214));
        btnLogout.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(255, 255, 255));
        btnLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logout (3).png"))); // NOI18N
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Proposal Validation Page");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(312, 312, 312)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnLogout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ThirdPartyPane)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(ThirdPartyPane, javax.swing.GroupLayout.PREFERRED_SIZE, 884, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listBorrowerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listBorrowerMouseClicked
        // TODO add your handling code here:
        propIDfromListSelection = listBorrower.getSelectedValue().toString();
        populateBorrowerProposals(propIDfromListSelection);
    }//GEN-LAST:event_listBorrowerMouseClicked

    private void cbBusinessProfitYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBusinessProfitYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbBusinessProfitYesActionPerformed

    private void cbNumberofEmpYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNumberofEmpYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbNumberofEmpYesActionPerformed

    private void cbAvgSalaryYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAvgSalaryYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbAvgSalaryYesActionPerformed

    private void lblEssentialFundsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblEssentialFundsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lblEssentialFundsActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:

        LoginPage lp = new LoginPage();
        lp.setVisible(true);
        dispose();

    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnApproveBorrowerProposalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveBorrowerProposalActionPerformed
        // TODO add your handling code here:
        if (txtBorrowerID.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(rootPane, "Please select a proposal first");
            return;
        }
        for (Network nw : system.getNetworkList()) {
            if (nw.getNetworkName().equalsIgnoreCase("Boston")) {
                for (Proposal pr : nw.getProposalDirectory().getProposalDirectory()) {
                    if (pr.getProposalId() == Integer.parseInt(propIDfromListSelection)) {
                        pr.setProposalStatus("Funds Requested");
                        String businessId = (String) cbBusinessID.getSelectedItem();
                        int busIdbyFunder = Integer.parseInt(businessId);
                        pr.setBusinessIdByFunder(busIdbyFunder);
                        
                        pr.setComments(txtAreaComments.getText());
                        pr.setFunderId(txtFunderID.getText());
                        
                        populateProposalsForVerification();

                        //Generate Work Request at Network level 
                        //workRequest with Proposal ID in workRequest Name 
                        WorkRequest addWorkRequests = nw.genWorkRequests(pr.getProposalId(), "PA", "FM", UserAccount.RoleType.PROPOSALADMIN, UserAccount.RoleType.FUNDMANAGER, Organization.Type.AUDITINGORG, Organization.Type.TREASURYORG, "Open", "Proposal :" + pr.getProposalId() + " Sent to Fund Manager to deduct funds");

                        // WorkRequest addWorkRequests = nw.addWorkRequests(UserAccount.RoleType.PROPOSALADMIN, UserAccount.RoleType.TREASURER, Organization.Type.AUDITINGORG, Organization.Type.TREASURYORG, "Open", "Sent to Treasurer to deduct funds");
                        //Generate work Request at person level - Treasurer in this case
                        for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                            if (ent.getEnterpriseType() == Enterprise.EnterpriseType.FUNDMANAGEMENTENTERPRISE) {
                                FundManagementEnterprise fme = (FundManagementEnterprise) ent;
                                Map<Integer, Employee> employeeDirectory = fme.getEmployeeDirectory();
                                for (Map.Entry<Integer, Employee> entry : employeeDirectory.entrySet()) {
                                    Object key = entry.getKey();
                                    Object val = entry.getValue();
                                    //Add wr to Fund Manager - Treasury Org to deduct funds
                                    if (entry.getKey().equals(2)) {//Emp 2  is FundManager to whom we need to assign WORKREQUEST
                                        entry.getValue().addWorkReqToPerson(addWorkRequests);
                                        
                                    }
                                    
                                }
                            }
                            if (ent.getEnterpriseType() == Enterprise.EnterpriseType.PROPOSALMANAGEMENTENTERPRISE) {
                                ProposalManagementEnterprise propEnt = (ProposalManagementEnterprise) ent;
                                Employee propAdmin = propEnt.getEmployeeDirectory().get(1);
                                propAdmin.addWorkReqToPerson(addWorkRequests);
                            }
                            //change the status of WorkRequest by the borrower
                            if (ent.getEnterpriseType() == Enterprise.EnterpriseType.USERANDVERIFICATIONENTERPRISE) {
                                UserAndVerificationEnterprise userEnt = (UserAndVerificationEnterprise) ent;
                                for (Borrower br : userEnt.getBorrowerDirectory()) {
                                    String borrowerID = txtBorrowerID.getText();
                                    
                                    if (br.getBorrowerId().equals(borrowerID)) {
                                        //Get the current workRequest of lender
                                        Map<Integer, WorkRequest> personWorkIDs = br.getPersonWorkQueue();
                                        //  nw.addWorkRequests(UserAccount.RoleType.PROPOSALADMIN, UserAccount.RoleType.CLOSED, Organization.Type.AUDITINGORG, Organization.Type.TREASURYORG, "APPROVED", "PROPOSAL ADMIN APPROVED")
                                        for (Map.Entry<Integer, WorkRequest> entry : personWorkIDs.entrySet()) {
                                            Object key = entry.getKey();
                                            Object val = entry.getValue();
                                            
                                            if ("RUNNING".equalsIgnoreCase(entry.getValue().getStatus())) {
                                                
                                                if (nw.getWorkQueueNetwork().containsKey(key)) {
                                                    //change the status and message of the WorkRequest
                                                    WorkRequest workReqChange = nw.getWorkQueueNetwork().get(key);
                                                    workReqChange = workReqChange.changeStatMessOfWorkRequest(workReqChange, "CLOSED", "Proposal Request sent to Funds Manager");
                                                }
                                            }
                                            
                                        }
                                    }
                                }
                            }
                            
                        }
                        
                        JOptionPane.showMessageDialog(rootPane, "Sent to Funds Organization");
                        popWorkReqTab();
                        txtBorrowerID.setText("");
                        txtBusinessName.setText("");
                        cbBusinessID.setSelectedItem("");
                        txtFunderID.setText("");
                        txtReqAmt.setText("");
                        cbBusinessProfitYes.setSelected(false);
                        cbNumberofEmpYes.setSelected(false);
                        cbAvgSalaryYes.setSelected(false);
//                        txtFunderID.setText("");
                        txtFunderID.setEditable(false);
                        return;
                    }
                }
            }
        }

    }//GEN-LAST:event_btnApproveBorrowerProposalActionPerformed

    private void btnRejectBorrowerProposalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectBorrowerProposalActionPerformed
        // TODO add your handling code heregetProposalDirectory:
        if (txtBorrowerID.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(rootPane, "Please select a proposal first");
            return;
        }
        for (Network nw : system.getNetworkList()) {
            if (nw.getNetworkName().equalsIgnoreCase("Boston")) {
                int propID;
                for (Proposal pr : nw.getProposalDirectory().getProposalDirectory()) {
                    if (pr.getProposalId() == Integer.parseInt(propIDfromListSelection)) {
                        pr.setProposalStatus("Proposal Rejected");
                        pr.getBorrower().setActiveStatus("Initial");
                        pr.setComments(txtAreaComments.getText());
                        JOptionPane.showMessageDialog(rootPane, "Borrower Proposal Rejected :(");
                        populateProposalsForVerification();
                        
                    }
                }
                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                    //change the status of WorkRequest by the borrower
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.USERANDVERIFICATIONENTERPRISE) {
                        UserAndVerificationEnterprise userEnt = (UserAndVerificationEnterprise) ent;
                        for (Borrower br : userEnt.getBorrowerDirectory()) {
                            String borrowerID = txtBorrowerID.getText();
                            
                            if (br.getBorrowerId().equals(borrowerID)) {
                                //Get the current workRequest of lender
                                Map<Integer, WorkRequest> personWorkIDs = br.getPersonWorkQueue();
                                //  nw.addWorkRequests(UserAccount.RoleType.PROPOSALADMIN, UserAccount.RoleType.CLOSED, Organization.Type.AUDITINGORG, Organization.Type.TREASURYORG, "APPROVED", "PROPOSAL ADMIN APPROVED")
                                for (Map.Entry<Integer, WorkRequest> entry : personWorkIDs.entrySet()) {
                                    Object key = entry.getKey();
                                    Object val = entry.getValue();
                                    
                                    if ("RUNNING".equalsIgnoreCase(entry.getValue().getStatus())) {
                                        
                                        if (nw.getWorkQueueNetwork().containsKey(key)) {
                                            //change the status and message of the WorkRequest
                                            WorkRequest workReqChange = nw.getWorkQueueNetwork().get(key);
                                            workReqChange = workReqChange.changeStatMessOfWorkRequest(workReqChange, "CLOSED", "Proposal " + propIDfromListSelection + " Rejected for " + borrowerID);
                                            popWorkReqTab();
                                            return;
                                        }
                                    }
                                    
                                }
                            }
                        }
                    }
                }
                txtBorrowerID.setText("");
                txtBusinessName.setText("");
                cbBusinessID.setSelectedItem("");
                txtFunderID.setText("");
                txtReqAmt.setText("");
                // CbRevenueYes.setSelected(false);
                cbNumberofEmpYes.setSelected(false);
                cbAvgSalaryYes.setSelected(false);
//                        txtFunderID.setText("");
                txtFunderID.setEditable(false);
                
            }
        }
    }//GEN-LAST:event_btnRejectBorrowerProposalActionPerformed

    private void cbBusinessIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBusinessIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbBusinessIDActionPerformed

    private void cbBusinessIDInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_cbBusinessIDInputMethodTextChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_cbBusinessIDInputMethodTextChanged

    private void cbBusinessIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbBusinessIDItemStateChanged
        // TODO add your handling code here:
        String selectedBusinessId = (String) cbBusinessID.getSelectedItem();
        int busId = Integer.parseInt(selectedBusinessId);
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equals(nw.getNetworkName())) {
                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.BUSINESSENTERPRISE) {
                        BusinessEnterprise busEnt = (BusinessEnterprise) ent;
                        for (Business br : busEnt.getBusinessDir()) {
                            
                            if (busId == br.getBusinessId()) {
                                if (br.getLenderID() == null) {
                                    txtFunderID.setText("Government");
                                } else {
                                    txtFunderID.setText(br.getLenderID());
                                }
                                return;
                            }
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_cbBusinessIDItemStateChanged
    
    public void AddLenderId() {
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProposalValidationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProposalValidationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProposalValidationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProposalValidationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProposalValidationPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane ThirdPartyPane;
    private javax.swing.JButton btnApproveBorrowerProposal;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRejectBorrowerProposal;
    private javax.swing.JCheckBox cbAvgSalaryYes;
    private javax.swing.JComboBox<String> cbBusinessID;
    private javax.swing.JCheckBox cbBusinessProfitYes;
    private javax.swing.JCheckBox cbNumberofEmpYes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblBSupported;
    private javax.swing.JLabel lblBorrowerID;
    private javax.swing.JLabel lblBorrowerList;
    private javax.swing.JLabel lblBusinessID;
    private javax.swing.JLabel lblBusinessName1;
    private javax.swing.JLabel lblEmpNumber;
    private javax.swing.JTextField lblEssentialFunds;
    private javax.swing.JLabel lblFunderID;
    private javax.swing.JLabel lblGovBusinessList;
    private javax.swing.JLabel lblLenderBusinessList;
    private javax.swing.JLabel lblLenderSupportedBusiness;
    private javax.swing.JTextField lblNonEssentialFunds;
    private javax.swing.JLabel lblProfit;
    private javax.swing.JLabel lblReqAmt;
    private javax.swing.JLabel lblRequestedAmt;
    private javax.swing.JTextField lblTotalFunds;
    private javax.swing.JList<String> listBorrower;
    private javax.swing.JPanel panAllBusiness;
    private javax.swing.JPanel panAllFunds;
    private javax.swing.JPanel panProposalValidation;
    private javax.swing.JPanel panelWorkRequests;
    private javax.swing.JTable tabLenderFunds;
    private javax.swing.JTable tabWorkRequests;
    private javax.swing.JTable tblGovernmentBusiness;
    private javax.swing.JTable tblLenderBusiness;
    private javax.swing.JTable tblLenderSupportedBusiness;
    private javax.swing.JTextArea txtAreaComments;
    private javax.swing.JTextField txtBorrowerID;
    private javax.swing.JTextField txtBusinessName;
    private javax.swing.JTextField txtEFunds;
    private javax.swing.JTextField txtFunderID;
    private javax.swing.JTextField txtNEFunds2;
    private javax.swing.JTextField txtReqAmt;
    private javax.swing.JTextField txtTotalFunds;
    // End of variables declaration//GEN-END:variables
    public void populateLendersForVerification() {
//
//        txtLenderId.setEditable(false);
//        txtLenderName.setEditable(false);
//        txtLenderBusiness.setEditable(false);
//        txtFundingAmount.setEditable(false);

     DefaultTableModel model = (DefaultTableModel) tabLenderFunds.getModel();
        model.setRowCount(0);
        Object[] row = new Object[2];
//
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equalsIgnoreCase(nw.getNetworkName())) {
                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                    System.out.println("entin");
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.USERANDVERIFICATIONENTERPRISE) {
                        UserAndVerificationEnterprise userEnt = (UserAndVerificationEnterprise) ent;
                        for (Lender len : userEnt.getLenderDirectory()) {
                            if (len.getActiveStatus().equalsIgnoreCase("Approved") ) {
                               row[0] = len.getLenderID();
                               row[1] = len.getFundingAmount();
                               model.addRow(row);
                            }
                        }
                        return;
                    }
                }
            }
        }

    }
    
    public void populateProposalsForVerification() {
        DefaultListModel mlist = new DefaultListModel();
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equalsIgnoreCase(nw.getNetworkName())) {
                for (Proposal pr : nw.getProposalDirectory().getProposalDirectory()) {
                    if (pr.getProposalStatus().equalsIgnoreCase("Initiated")) {
                        mlist.addElement(String.valueOf(pr.getProposalId()));
                    }
                }
                listBorrower.setModel(mlist);
                return;
            }
        }
    }
    
    public void populateLenderDetails(String data) {
//        for (Network nw : system.getNetworkList()) {
//            if ("Boston".equalsIgnoreCase(nw.getNetworkName())) {
//                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
////                    System.out.println("entin");
//                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.USERANDVERIFICATIONENTERPRISE) {
//                        UserAndVerificationEnterprise userEnt = (UserAndVerificationEnterprise) ent;
////                        ArrayList<Lender> lenderDirectory = userEnt.getLenderDirectory();
//                        for (Lender len : userEnt.getLenderDirectory()) {
////                            System.out.println("in");
//                            if (len.getLenderID().equalsIgnoreCase(data)) {
//                                txtLenderId.setText(len.getLenderID());
//                                txtLenderName.setText(len.getName());
//                                txtLenderBusiness.setText(BusinessNameById(len.getSupportedBusinessId()));
//                                txtFundingAmount.setText(String.valueOf(len.getFundingAmount()));
//                                if (len.getRevenue() > 3 * len.getFundingAmount()) {
//                                    CbRevenueYes.setSelected(true);
//                                }
//                                if (len.getTaxAmountPaid() > 0.1 * len.getRevenue()) {
//                                    CbIncomeTaxYes.setSelected(true);
//                                }
//                                if (len.getInterestRate() < 10) {
//                                    CbROIYes.setSelected(true);
//                                }
//                                if (len.getInterestStartYears() > 1) {
//                                    cbPeriodofRetYes.setSelected(true);
//                                }
//
//                            }
//                        }
//                    }
//                }
//            }
//        }

    }
    
    public void populateBorrowerProposals(String data) {
        for (Network n : system.getNetworkList()) {
            if (n.getNetworkName().equalsIgnoreCase("Boston")) {
                for (Proposal pr : n.getProposalDirectory().getProposalDirectory()) {
                    if (pr.getProposalId() == Integer.parseInt(data)) {
                        txtBorrowerID.setText(pr.getBorrower().getBorrowerId());
                        txtBusinessName.setText(pr.getBorrower().getBusinessName());
                        cbBusinessID.setSelectedItem(pr.getBorrower().getBusinessId());
                        txtFunderID.setText(pr.getFunderId());
                        txtReqAmt.setText(String.valueOf(pr.getBorrower().getRequestedFund()));
                        // Condition for In profit or not..
                        if (pr.getBorrower().getRevenue() > 100000) {
                            cbBusinessProfitYes.setSelected(true);
                        }
                        if (pr.getBorrower().getEmployeeCount() < 500) {
                            cbNumberofEmpYes.setSelected(true);
                        }
                        if (pr.getBorrower().getRequestedFund() < 2.5 * pr.getBorrower().getEmployeeAverageSalary()) {
                            cbAvgSalaryYes.setSelected(true);
                        }
                    }
                }
            }
        }
    }
    
    public String BusinessNameById(int supportedBusinessId) {
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equals(nw.getNetworkName())) {
                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.BUSINESSENTERPRISE) {
                        BusinessEnterprise busEnt = (BusinessEnterprise) ent;
                        for (Business br : busEnt.getBusinessDir()) {
                            if (br.getBusinessId() == supportedBusinessId) {
                                return br.getBusinessName();
                            }
                        }
                    }
                }
            }
        }
        return null;
    }
    
    public void populateGovernmentBusinessTable() {
        DefaultTableModel model = (DefaultTableModel) tblGovernmentBusiness.getModel();
        model.setRowCount(0);
        Object[] row = new Object[2];
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equals(nw.getNetworkName())) {
                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.BUSINESSENTERPRISE) {
                        BusinessEnterprise busEnt = (BusinessEnterprise) ent;
                        for (Business br : busEnt.getBusinessDir()) {
                            if (br.getOrgType() == Organization.Type.PUBLICBUSINESSPORTFOLIOORG) {
                                row[0] = br;
                                row[1] = br.getBusinessName();
                                model.addRow(row);
                            }
                            
                        }
                        return;
                    }
                }
            }
        }
    }
    
    private void popWorkReqTab() {
        DefaultTableModel model = (DefaultTableModel) tabWorkRequests.getModel();
        model.setRowCount(0);
        
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equals(nw.getNetworkName())) {
                
                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                    
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.PROPOSALMANAGEMENTENTERPRISE) {
                        ProposalManagementEnterprise propEnt = (ProposalManagementEnterprise) ent;
                        Employee propAdmin = propEnt.getEmployeeDirectory().get(1);
                        Map<Integer, WorkRequest> personWorkQueue = propAdmin.getPersonWorkQueue();
                        try {
                            for (Map.Entry<Integer, WorkRequest> entry : personWorkQueue.entrySet()) {
                                Object key = entry.getKey();
                                Object val = entry.getValue();
                                
                                Object[] row = new Object[7];
                                row[0] = entry.getKey();
                                row[1] = entry.getValue().getSender();
                                row[2] = entry.getValue().getReceiver();
                                row[3] = entry.getValue().getSenderOrg();
                                row[4] = entry.getValue().getReceiverOrg();
                                row[5] = entry.getValue().getMessage();
                                row[6] = entry.getValue().getStatus();
                                
                                model.addRow(row);
                                
                            }
                        } catch (NullPointerException e) {
                        }
                        
                    }
                }
                
            }
        }
    }
    
    public void populatePrivateBusinessTable() {
        DefaultTableModel model = (DefaultTableModel) tblLenderBusiness.getModel();
        model.setRowCount(0);
        Object[] row = new Object[3];
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equals(nw.getNetworkName())) {
                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.BUSINESSENTERPRISE) {
                        BusinessEnterprise busEnt = (BusinessEnterprise) ent;
                        for (Business br : busEnt.getBusinessDir()) {
                            if (br.getOrgType() == Organization.Type.PRIVATEBUSINESSORG) {
                                row[0] = br;
                                row[1] = br.getBusinessName();
                                row[2] = br.getLenderID();
                                model.addRow(row);
                            }
                        }
                        return;
                    }
                }
            }
        }
    }
    
    private void populateBusinessId() {
        cbBusinessID.removeAllItems();
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equals(nw.getNetworkName())) {
                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.BUSINESSENTERPRISE) {
                        BusinessEnterprise busEnt = (BusinessEnterprise) ent;
                        for (Business br : busEnt.getBusinessDir()) {
                            cbBusinessID.addItem(String.valueOf(br));
                            
                        }
                        return;
                    }
                }
            }
        }
    }
    
    private void populateLenderSupportedBusinessTable() {
        DefaultTableModel model = (DefaultTableModel) tblLenderSupportedBusiness.getModel();
        model.setRowCount(0);
        Object[] row = new Object[2];
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equals(nw.getNetworkName())) {
                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.USERANDVERIFICATIONENTERPRISE) {
                        UserAndVerificationEnterprise userEnt = (UserAndVerificationEnterprise) ent;
                        for (Lender len : userEnt.getLenderDirectory()) {
                            row[0] = len.getLenderID();
                            row[1] = len.getSupportedBusinessId();
                            model.addRow(row);
                        }
                        return;
                    }
                    
                }
            }
        }
    }
    
}
