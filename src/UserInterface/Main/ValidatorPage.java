/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UserInterface.Main;

import Business.DB4OUtil.DB4OUtil;
import BusinessReliefPortal.Borrower.Borrower;
import BusinessReliefPortal.Business.Business;
import BusinessReliefPortal.Employee.Employee;
import BusinessReliefPortal.Enterprise.BusinessEnterprise;
import BusinessReliefPortal.Enterprise.Enterprise;
import BusinessReliefPortal.Enterprise.FundManagementEnterprise;
import BusinessReliefPortal.Enterprise.ProposalManagementEnterprise;
import BusinessReliefPortal.Enterprise.UserAndVerificationEnterprise;
import BusinessReliefPortal.Lender.Lender;
import BusinessReliefPortal.Network.Network;
import BusinessReliefPortal.Organization.Organization;
import BusinessReliefPortal.Proposal.Proposal;
import BusinessReliefPortal.UserAccount.UserAccount;
import BusinessReliefPortal.WorkRequest.WorkRequest;
import static UserInterface.Main.LenderPage.lenderID;
import java.awt.Image;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ishitajanwale
 */
public class ValidatorPage extends javax.swing.JFrame {

    /**
     * Creates new form ValidatorPage
     */
    BusinessReliefPortal.BusinessReliefSystem system;

    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    String propIDfromListSelection;

    public ValidatorPage() {
        initComponents();
        system = LoginPage.system;
        populateLendersForVerification();
//        populateProposalsForVerification();
//        populateGovernmentBusinessTable();
//        populatePrivateBusinessTable();
//        populateLenderSupportedBusinessTable();
//        populateBusinessId();

        popWorkReqTab();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ThirdPartyPane = new javax.swing.JTabbedPane();
        panLenderVal = new javax.swing.JPanel();
        lblRevenueCondition = new javax.swing.JLabel();
        lblIncomeTaxCondition = new javax.swing.JLabel();
        lblROI = new javax.swing.JLabel();
        lblPeriodofReturn = new javax.swing.JLabel();
        lblLenderName = new javax.swing.JLabel();
        lblLenderBusiness = new javax.swing.JLabel();
        CbRevenueYes = new javax.swing.JCheckBox();
        CbIncomeTaxYes = new javax.swing.JCheckBox();
        CbROIYes = new javax.swing.JCheckBox();
        cbPeriodofRetYes = new javax.swing.JCheckBox();
        txtLenderName = new javax.swing.JTextField();
        txtLenderBusiness = new javax.swing.JTextField();
        lblFundingAmount = new javax.swing.JLabel();
        txtFundingAmount = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListLenderID = new javax.swing.JList<>();
        lblLenderId = new javax.swing.JLabel();
        txtLenderId = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnRejectLenderProposal = new javax.swing.JButton();
        btnApproveLenderProposal = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        panelWorkRequests = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabWorkRequests = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnLogout = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panLenderVal.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblRevenueCondition.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblRevenueCondition.setForeground(new java.awt.Color(0, 171, 214));
        lblRevenueCondition.setText("Revenue > 3*amount being funded");
        panLenderVal.add(lblRevenueCondition, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 385, 323, 39));

        lblIncomeTaxCondition.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblIncomeTaxCondition.setForeground(new java.awt.Color(0, 171, 214));
        lblIncomeTaxCondition.setText("Income Tax> 10% of revenue");
        panLenderVal.add(lblIncomeTaxCondition, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 454, 323, 39));

        lblROI.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblROI.setForeground(new java.awt.Color(0, 171, 214));
        lblROI.setText("Rate of Interest < 10%");
        panLenderVal.add(lblROI, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 523, 323, 39));

        lblPeriodofReturn.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblPeriodofReturn.setForeground(new java.awt.Color(0, 171, 214));
        lblPeriodofReturn.setText("Period of return > 1 year");
        panLenderVal.add(lblPeriodofReturn, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 600, 323, 39));

        lblLenderName.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblLenderName.setForeground(new java.awt.Color(0, 171, 214));
        lblLenderName.setText("Lender Name");
        panLenderVal.add(lblLenderName, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 178, 323, 39));

        lblLenderBusiness.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblLenderBusiness.setForeground(new java.awt.Color(0, 171, 214));
        lblLenderBusiness.setText("Lender Business");
        panLenderVal.add(lblLenderBusiness, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 316, 323, 39));

        CbRevenueYes.setBackground(new java.awt.Color(255, 255, 255));
        CbRevenueYes.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        CbRevenueYes.setForeground(new java.awt.Color(0, 171, 214));
        CbRevenueYes.setText("Yes");
        CbRevenueYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbRevenueYesActionPerformed(evt);
            }
        });
        panLenderVal.add(CbRevenueYes, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 380, 75, 37));

        CbIncomeTaxYes.setBackground(new java.awt.Color(255, 255, 255));
        CbIncomeTaxYes.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        CbIncomeTaxYes.setForeground(new java.awt.Color(0, 171, 214));
        CbIncomeTaxYes.setText("Yes");
        CbIncomeTaxYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbIncomeTaxYesActionPerformed(evt);
            }
        });
        panLenderVal.add(CbIncomeTaxYes, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 450, 75, 39));

        CbROIYes.setBackground(new java.awt.Color(255, 255, 255));
        CbROIYes.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        CbROIYes.setForeground(new java.awt.Color(0, 171, 214));
        CbROIYes.setText("Yes");
        CbROIYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbROIYesActionPerformed(evt);
            }
        });
        panLenderVal.add(CbROIYes, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 520, 75, 39));

        cbPeriodofRetYes.setBackground(new java.awt.Color(255, 255, 255));
        cbPeriodofRetYes.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        cbPeriodofRetYes.setForeground(new java.awt.Color(0, 171, 214));
        cbPeriodofRetYes.setText("Yes");
        cbPeriodofRetYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPeriodofRetYesActionPerformed(evt);
            }
        });
        panLenderVal.add(cbPeriodofRetYes, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 590, 75, 39));

        txtLenderName.setBackground(new java.awt.Color(0, 171, 214));
        txtLenderName.setForeground(new java.awt.Color(255, 255, 255));
        panLenderVal.add(txtLenderName, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 180, 323, 39));

        txtLenderBusiness.setBackground(new java.awt.Color(0, 171, 214));
        txtLenderBusiness.setForeground(new java.awt.Color(255, 255, 255));
        panLenderVal.add(txtLenderBusiness, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 320, 323, 39));

        lblFundingAmount.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblFundingAmount.setForeground(new java.awt.Color(0, 171, 214));
        lblFundingAmount.setText("Funding Amount");
        panLenderVal.add(lblFundingAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 247, 323, 39));

        txtFundingAmount.setBackground(new java.awt.Color(0, 171, 214));
        txtFundingAmount.setForeground(new java.awt.Color(255, 255, 255));
        panLenderVal.add(txtFundingAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 250, 323, 39));

        ListLenderID.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        ListLenderID.setForeground(new java.awt.Color(0, 171, 214));
        ListLenderID.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ListLenderID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListLenderIDMouseClicked(evt);
            }
        });
        ListLenderID.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListLenderIDValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(ListLenderID);

        panLenderVal.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 99, 80, 579));

        lblLenderId.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblLenderId.setForeground(new java.awt.Color(0, 171, 214));
        lblLenderId.setText("Lender ID");
        panLenderVal.add(lblLenderId, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 99, 323, 39));

        txtLenderId.setBackground(new java.awt.Color(0, 171, 214));
        txtLenderId.setForeground(new java.awt.Color(255, 255, 255));
        panLenderVal.add(txtLenderId, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 100, 323, 39));

        jLabel1.setBackground(new java.awt.Color(0, 171, 214));
        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 171, 214));
        jLabel1.setText("Select a Lender ID");
        panLenderVal.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 64, -1, -1));

        btnRejectLenderProposal.setBackground(new java.awt.Color(255, 51, 0));
        btnRejectLenderProposal.setForeground(new java.awt.Color(255, 255, 255));
        btnRejectLenderProposal.setText("Reject");
        btnRejectLenderProposal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectLenderProposalActionPerformed(evt);
            }
        });
        panLenderVal.add(btnRejectLenderProposal, new org.netbeans.lib.awtextra.AbsoluteConstraints(823, 718, 133, 43));

        btnApproveLenderProposal.setBackground(new java.awt.Color(51, 153, 0));
        btnApproveLenderProposal.setForeground(new java.awt.Color(255, 255, 255));
        btnApproveLenderProposal.setText("Approve");
        btnApproveLenderProposal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveLenderProposalActionPerformed(evt);
            }
        });
        panLenderVal.add(btnApproveLenderProposal, new org.netbeans.lib.awtextra.AbsoluteConstraints(672, 718, 133, 43));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/istockphoto-1281736074-612x612 (1).jpg"))); // NOI18N
        panLenderVal.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 930));

        ThirdPartyPane.addTab("Review Lender Proposals", panLenderVal);

        panelWorkRequests.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabWorkRequests.setBackground(new java.awt.Color(0, 171, 214));
        tabWorkRequests.setForeground(new java.awt.Color(255, 255, 255));
        tabWorkRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Work Rquest Id", "Sender", "Receiver", "Sender Org", "Receiver Org", "Message", "Status"
            }
        ));
        jScrollPane6.setViewportView(tabWorkRequests);

        panelWorkRequests.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 71, 956, 360));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/white-bright-abstract-background-vector-20802409.jpg"))); // NOI18N
        panelWorkRequests.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, -70, 1010, 1120));

        ThirdPartyPane.addTab("WorkRequest", panelWorkRequests);

        jPanel1.setBackground(new java.awt.Color(0, 171, 214));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        btnLogout.setBackground(new java.awt.Color(0, 171, 214));
        btnLogout.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(255, 255, 255));
        btnLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logout (3).png"))); // NOI18N
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Validator's Page");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(307, 307, 307)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ThirdPartyPane))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(ThirdPartyPane, javax.swing.GroupLayout.PREFERRED_SIZE, 976, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:

        LoginPage lp = new LoginPage();
        lp.setVisible(true);
        dispose();

    }//GEN-LAST:event_btnLogoutActionPerformed

    private void ListLenderIDValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ListLenderIDValueChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_ListLenderIDValueChanged

    private void ListLenderIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListLenderIDMouseClicked
        // TODO add your handling code here:
        String lenderIDfromListSelection = ListLenderID.getSelectedValue().toString();
        populateLenderDetails(lenderIDfromListSelection);
        //         txtLID.setText(data);
    }//GEN-LAST:event_ListLenderIDMouseClicked

    private void cbPeriodofRetYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPeriodofRetYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbPeriodofRetYesActionPerformed

    private void CbROIYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbROIYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CbROIYesActionPerformed

    private void CbIncomeTaxYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbIncomeTaxYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CbIncomeTaxYesActionPerformed

    private void CbRevenueYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbRevenueYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CbRevenueYesActionPerformed

    private void btnRejectLenderProposalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectLenderProposalActionPerformed
        // TODO add your handling code here:
        if (txtLenderId.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(rootPane, "Please select a lender first");
            return;
        }
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equalsIgnoreCase(nw.getNetworkName())) {
                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
//                    System.out.println("entin");
                    BusinessEnterprise busEnt = new BusinessEnterprise();
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.BUSINESSENTERPRISE) {
                        busEnt = (BusinessEnterprise) ent;

                    }
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.USERANDVERIFICATIONENTERPRISE) {
                        UserAndVerificationEnterprise userEnt = (UserAndVerificationEnterprise) ent;
//                        ArrayList<Lender> lenderDirectory = userEnt.getLenderDirectory();
                        for (Lender len : userEnt.getLenderDirectory()) {
//                            System.out.println("in");
                            if (len.getLenderID().equalsIgnoreCase(txtLenderId.getText())) {
                                len.setActiveStatus("Rejected");
                                JOptionPane.showMessageDialog(rootPane, "Lender Rejected");
                                populateLendersForVerification();
                                txtLenderId.setText("");
                                txtLenderName.setText("");
                                txtLenderBusiness.setText("");
                                txtFundingAmount.setText("");
                                CbRevenueYes.setSelected(false);
                                CbROIYes.setSelected(false);
                                CbIncomeTaxYes.setSelected(false);
                                cbPeriodofRetYes.setSelected(false);
                                Map<Integer, WorkRequest> personWorkIDs = len.getPersonWorkQueue();
                                //  nw.addWorkRequests(UserAccount.RoleType.PROPOSALADMIN, UserAccount.RoleType.CLOSED, Organization.Type.AUDITINGORG, Organization.Type.TREASURYORG, "APPROVED", "PROPOSAL ADMIN APPROVED")
                                for (Map.Entry<Integer, WorkRequest> entry : personWorkIDs.entrySet()) {
                                    Object key = entry.getKey();
                                    Object val = entry.getValue();

                                    if (nw.getWorkQueueNetwork().containsKey(key)) {
                                        WorkRequest workReqChange = nw.getWorkQueueNetwork().get(key);
                                        workReqChange = workReqChange.changeStatMessOfWorkRequest(workReqChange, "Rejected", "Lender Status Rejected");
                                    }
                                    // userEnt.getLenderDirectory().remove(len);

                                    try {
                                        busEnt.removeBusiness(len.getSupportedBusinessId());

                                    } catch (NullPointerException e) {
                                    }

                                }
                                popWorkReqTab();
                                return;
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnRejectLenderProposalActionPerformed

    private void btnApproveLenderProposalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveLenderProposalActionPerformed
        // TODO add your handling code here:
        if (txtLenderId.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(rootPane, "Please select a lender first");
            return;
        }
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equalsIgnoreCase(nw.getNetworkName())) {
                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
//                    System.out.println("entin");
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.USERANDVERIFICATIONENTERPRISE) {
                        UserAndVerificationEnterprise userEnt = (UserAndVerificationEnterprise) ent;
//                        ArrayList<Lender> lenderDirectory = userEnt.getLenderDirectory();
                        for (Lender len : userEnt.getLenderDirectory()) {
//                            System.out.println("in");
                            if (len.getLenderID().equalsIgnoreCase(txtLenderId.getText())) {
                                len.setActiveStatus("Approved");
                                JOptionPane.showMessageDialog(rootPane, "Lender Proposal has been successfully approved");
                                populateLendersForVerification();
                                txtLenderId.setText("");
                                txtLenderName.setText("");
                                txtLenderBusiness.setText("");
                                txtFundingAmount.setText("");
                                CbRevenueYes.setSelected(false);
                                CbROIYes.setSelected(false);
                                CbIncomeTaxYes.setSelected(false);
                                cbPeriodofRetYes.setSelected(false);
                                //Get the current workRequest of lender
                                Map<Integer, WorkRequest> personWorkIDs = len.getPersonWorkQueue();
                                //  nw.addWorkRequests(UserAccount.RoleType.PROPOSALADMIN, UserAccount.RoleType.CLOSED, Organization.Type.AUDITINGORG, Organization.Type.TREASURYORG, "APPROVED", "PROPOSAL ADMIN APPROVED")
                                for (Map.Entry<Integer, WorkRequest> entry : personWorkIDs.entrySet()) {
                                    Object key = entry.getKey();
                                    Object val = entry.getValue();

                                    if ("RUNNING".equalsIgnoreCase(entry.getValue().getStatus())) {
                                        if (nw.getWorkQueueNetwork().containsKey(key)) {
                                            //change the status and message of the WorkRequest
                                            WorkRequest workReqChange = nw.getWorkQueueNetwork().get(key);
                                            workReqChange = workReqChange.changeStatMessOfWorkRequest(workReqChange, "Approved", "Lender now has Active Status");
                                        }
                                    }

                                }

                                popWorkReqTab();
                                return;
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnApproveLenderProposalActionPerformed

    public void AddLenderId() {

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ValidatorPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ValidatorPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ValidatorPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ValidatorPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ValidatorPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CbIncomeTaxYes;
    private javax.swing.JCheckBox CbROIYes;
    private javax.swing.JCheckBox CbRevenueYes;
    private javax.swing.JList<String> ListLenderID;
    private javax.swing.JTabbedPane ThirdPartyPane;
    private javax.swing.JButton btnApproveLenderProposal;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRejectLenderProposal;
    private javax.swing.JCheckBox cbPeriodofRetYes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblFundingAmount;
    private javax.swing.JLabel lblIncomeTaxCondition;
    private javax.swing.JLabel lblLenderBusiness;
    private javax.swing.JLabel lblLenderId;
    private javax.swing.JLabel lblLenderName;
    private javax.swing.JLabel lblPeriodofReturn;
    private javax.swing.JLabel lblROI;
    private javax.swing.JLabel lblRevenueCondition;
    private javax.swing.JPanel panLenderVal;
    private javax.swing.JPanel panelWorkRequests;
    private javax.swing.JTable tabWorkRequests;
    private javax.swing.JTextField txtFundingAmount;
    private javax.swing.JTextField txtLenderBusiness;
    private javax.swing.JTextField txtLenderId;
    private javax.swing.JTextField txtLenderName;
    // End of variables declaration//GEN-END:variables
    public void populateLendersForVerification() {

        txtLenderId.setEditable(false);
        txtLenderName.setEditable(false);
        txtLenderBusiness.setEditable(false);
        txtFundingAmount.setEditable(false);

        DefaultListModel mlist = new DefaultListModel();
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equalsIgnoreCase(nw.getNetworkName())) {
                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                    System.out.println("entin");
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.USERANDVERIFICATIONENTERPRISE) {
                        UserAndVerificationEnterprise userEnt = (UserAndVerificationEnterprise) ent;
//                        ArrayList<Lender> lenderDirectory = userEnt.getLenderDirectory();
                        for (Lender len : userEnt.getLenderDirectory()) {
                            System.out.println("in");
                            if (len.getActiveStatus().equalsIgnoreCase("OnHold")) {
                                mlist.addElement(len.getLenderID());
                            }
                            if (len.getActiveStatus().equalsIgnoreCase("Approved") || len.getActiveStatus().equalsIgnoreCase("Rejected")) {
                                txtLenderId.setText("");
                                txtLenderName.setText("");
                                txtLenderBusiness.setText("");
                                txtFundingAmount.setText("");

                                CbRevenueYes.setSelected(false);
                                CbROIYes.setSelected(false);
                                CbIncomeTaxYes.setSelected(false);
                                cbPeriodofRetYes.setSelected(false);

                            }
                        }
                        ListLenderID.setModel(mlist);
                        return;
                    }
                }
            }
        }

    }

    public void populateProposalsForVerification() {
        DefaultListModel mlist = new DefaultListModel();
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equalsIgnoreCase(nw.getNetworkName())) {
                for (Proposal pr : nw.getProposalDirectory().getProposalDirectory()) {
                    if (pr.getProposalStatus().equalsIgnoreCase("Initiated")) {
                        mlist.addElement(String.valueOf(pr.getProposalId()));
                    }
                }
//                listBorrower.setModel(mlist);
                return;
            }
        }
    }

    public void populateLenderDetails(String data) {
        CbRevenueYes.setSelected(false);
        CbIncomeTaxYes.setSelected(false);
        CbROIYes.setSelected(false);
        cbPeriodofRetYes.setSelected(false);
        
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equalsIgnoreCase(nw.getNetworkName())) {
                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
//                    System.out.println("entin");
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.USERANDVERIFICATIONENTERPRISE) {
                        UserAndVerificationEnterprise userEnt = (UserAndVerificationEnterprise) ent;
//                        ArrayList<Lender> lenderDirectory = userEnt.getLenderDirectory();
                        for (Lender len : userEnt.getLenderDirectory()) {
//                            System.out.println("in");
                            if (len.getLenderID().equalsIgnoreCase(data)) {
                                txtLenderId.setText(len.getLenderID());
                                txtLenderName.setText(len.getName());
                                txtLenderBusiness.setText(BusinessNameById(len.getSupportedBusinessId()));
                                txtFundingAmount.setText(String.valueOf(len.getFundingAmount()));
                                if (len.getRevenue() > 3 * len.getFundingAmount()) {
                                    CbRevenueYes.setSelected(true);
                                }
                                if (len.getTaxAmountPaid() > 0.1 * len.getRevenue()) {
                                    CbIncomeTaxYes.setSelected(true);
                                }
                                if (len.getInterestRate() < 10) {
                                    CbROIYes.setSelected(true);
                                }
                                if (len.getInterestStartYears() > 1) {
                                    cbPeriodofRetYes.setSelected(true);
                                }

                            }
                        }
                    }
                }
            }
        }

    }

//    public void populateBorrowerProposals(String data) {
//        for (Network n : system.getNetworkList()) {
//            if (n.getNetworkName().equalsIgnoreCase("Boston")) {
//                for (Proposal pr : n.getProposalDirectory().getProposalDirectory()) {
//                    if (pr.getProposalId() == Integer.parseInt(data)) {
//                        txtBorrowerID.setText(pr.getBorrower().getBorrowerId());
//                        txtBusinessName.setText(pr.getBorrower().getBusinessName());
//                        cbBusinessID.setSelectedItem(pr.getBorrower().getBusinessId());
//                        txtFunderID.setText(pr.getFunderId());
//                        txtReqAmt.setText(String.valueOf(pr.getBorrower().getRequestedFund()));
//                        if (pr.getBorrower().getRevenue() > 100000) {
//                            CbRevenueYes.setSelected(true);
//                        }
//                        if (pr.getBorrower().getEmployeeCount() < 500) {
//                            cbNumberofEmpYes.setSelected(true);
//                        }
//                        if (pr.getBorrower().getRequestedFund() < 2.5 * pr.getBorrower().getEmployeeAverageSalary()) {
//                            cbAvgSalaryYes.setSelected(true);
//                        }
//                    }
//                }
//            }
//        }
//    }
    public String BusinessNameById(int supportedBusinessId) {
        for (Network nw : system.getNetworkList()) {
            if ("Boston".equals(nw.getNetworkName())) {
                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.BUSINESSENTERPRISE) {
                        BusinessEnterprise busEnt = (BusinessEnterprise) ent;
                        for (Business br : busEnt.getBusinessDir()) {
                            if (br.getBusinessId() == supportedBusinessId) {
                                return br.getBusinessName();
                            }
                        }
                    }
                }
            }
        }
        return null;
    }

    private void popWorkReqTab() {
        DefaultTableModel model = (DefaultTableModel) tabWorkRequests.getModel();
        model.setRowCount(0);

        for (Network nw : system.getNetworkList()) {
            if ("Boston".equals(nw.getNetworkName())) {
                Map<Integer, WorkRequest> workRequestAdd = nw.getWorkQueueNetwork();

                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.PROPOSALMANAGEMENTENTERPRISE) {
                        ProposalManagementEnterprise pme = (ProposalManagementEnterprise) ent;
                        Map<Integer, Employee> employeeDirectory = pme.getEmployeeDirectory();
                        for (Map.Entry<Integer, Employee> entr : employeeDirectory.entrySet()) {
                            Object k = entr.getKey();
                            Object v = entr.getValue();
                            //Add wr to Fund Manager - Treasury Org to deduct funds
                            if (entr.getKey().equals(2)) { //Emp 2  is FundManager to whom we need to assign WORKREQUEST
                                Map<Integer, WorkRequest> personWorkQueue = entr.getValue().getPersonWorkQueue();
                                for (Map.Entry<Integer, WorkRequest> entry : personWorkQueue.entrySet()) {
                                    Object key = entry.getKey();
                                    Object val = entry.getValue();
                                    Object[] row = new Object[7];
                                    row[0] = entry.getKey();
                                    row[1] = entry.getValue().getSender();
                                    row[2] = entry.getValue().getReceiver();
                                    row[3] = entry.getValue().getSenderOrg();
                                    row[4] = entry.getValue().getReceiverOrg();
                                    row[5] = entry.getValue().getMessage();
                                    row[6] = entry.getValue().getStatus();

                                    model.addRow(row);
                                }
                            }

                        }
                    }
                }

//              int workReqid = workRequestAdd.size()+1;
//             WorkRequest newWorkReq  = nw.addWorkRequests(workReqid, UserAccount.RoleType.LENDER, UserAccount.RoleType.TREASURER, Organization.Type.TREASURYORG, Organization.Type.TREASURYORG, "", "");
            }
        }
    }

//    public void populatePrivateBusinessTable() {
//        DefaultTableModel model = (DefaultTableModel) tblLenderBusiness.getModel();
//        model.setRowCount(0);
//        Object[] row = new Object[3];
//        for (Network nw : system.getNetworkList()) {
//            if ("Boston".equals(nw.getNetworkName())) {
//                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
//                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.BUSINESSENTERPRISE) {
//                        BusinessEnterprise busEnt = (BusinessEnterprise) ent;
//                        for (Business br : busEnt.getBusinessDir()) {
//                            if (br.getOrgType() == Organization.Type.PRIVATEBUSINESSORG) {
//                                row[0] = br;
//                                row[1] = br.getBusinessName();
//                                row[2] = br.getLenderID();
//                                model.addRow(row);
//                            }
//                        }
//                        return;
//                    }
//                }
//            }
//        }
//    }
//    private void populateBusinessId() {
//        cbBusinessID.removeAllItems();
//        for (Network nw : system.getNetworkList()) {
//            if ("Boston".equals(nw.getNetworkName())) {
//                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
//                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.BUSINESSENTERPRISE) {
//                        BusinessEnterprise busEnt = (BusinessEnterprise) ent;
//                        for (Business br : busEnt.getBusinessDir()) {
//                            cbBusinessID.addItem(String.valueOf(br));
//
//                        }
//                        return;
//                    }
//                }
//            }
//        }
//    }
//    private void populateLenderSupportedBusinessTable() {
//        DefaultTableModel model = (DefaultTableModel) tblLenderSupportedBusiness.getModel();
//        model.setRowCount(0);
//        Object[] row = new Object[2];
//        for (Network nw : system.getNetworkList()) {
//            if ("Boston".equals(nw.getNetworkName())) {
//                for (Enterprise ent : nw.getEntDirObj().getEnterpriseList()) {
//                    if (ent.getEnterpriseType() == Enterprise.EnterpriseType.USERANDVERIFICATIONENTERPRISE) {
//                        UserAndVerificationEnterprise userEnt =(UserAndVerificationEnterprise) ent;
//                        for(Lender len: userEnt.getLenderDirectory()){
//                                row[0] = len.getLenderID();
//                                row[1] = len.getSupportedBusinessId();
//                                model.addRow(row);
//                            }
//                             return;
//                        }
//                       
//                    }
//                }
//            }
//        }
}
